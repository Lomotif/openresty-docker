
user	www-data;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    server_tokens off;
    more_clear_headers 	Server;

    resolver 8.8.8.8;

    ##
    # Logformat
    ##

    include /etc/nginx/conf.d/*.logformat;

    ##
    # Logging Settings
    ##

    access_log /var/log/nginx/access.log detailed;
    error_log /var/log/nginx/error.log;

    ##
    # Additional Config
    ##

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

    ##
    # SSL Config
    # From the Mozilla SSL Configuration Generator
    # Ref: https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=nginx-1.10.1&openssl=1.0.1e&hsts=yes&profile=modern
    ##
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    # add_header Strict-Transport-Security max-age=15768000;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    # ssl_stapling on;
    # ssl_stapling_verify on;

    # Verify chain of trust of OCSP response using Root CA and Intermediate certs
    # ssl_trusted_certificate /etc/nginx/letsencrypt/chain.pem;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # Prometheus Monitoring
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/etc/nginx/lua/?.lua;/etc/nginx/lua/modules/?.lua;;";
    init_by_lua_block {

      -- This stub is replaced in the nginx.init script
      -- This is a way to dynamically load all Lua modules under
      -- /etc/nginx/lua/init/
      %lua_init_includes%

    }

    init_worker_by_lua_block {

      -- This stub is replaced in the nginx.init script
      -- This is a way to dynamically load all Lua modules under
      -- /etc/nginx/lua/init/
      %lua_init_worker_includes%
    }

    # For reference. Should configure logging for each server block
    # log_by_lua_block {
    #   local host = ngx.var.host:gsub("^www.", "")
    #   metric_requests:inc(1, {host, ngx.var.status})
    #   metric_latency:observe(ngx.now() - ngx.req.start_time(), {host})
    #   metric_response_sizes:observe(tonumber(ngx.var.bytes_sent), {host})
    # }

}
