
user	www-data;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    server_tokens off;
    more_clear_headers 	Server;

    ##
    # Logformat
    ##

    include /etc/nginx/conf.d/*.logformat;

    ##
    # Logging Settings
    ##

    access_log /var/log/nginx/access.log detailed;
    error_log /var/log/nginx/error.log;

    ##
    # Virtual Host Configs
    ##

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # Prometheus Monitoring
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/etc/nginx/lua/?.lua;/etc/nginx/lua/modules/?.lua;;";
    init_by_lua_block {

      -- This stub is replaced in the nginx.init script
      -- This is a way to dynamically load all Lua modules under
      -- /etc/nginx/lua/init/
      %lua_init_includes%

    }

    init_worker_by_lua_block {

      -- This stub is replaced in the nginx.init script
      -- This is a way to dynamically load all Lua modules under
      -- /etc/nginx/lua/init/
      %lua_init_worker_includes%
    }

    # For reference. Should configure logging for each server block
    # log_by_lua_block {
    #   local host = ngx.var.host:gsub("^www.", "")
    #   metric_requests:inc(1, {host, ngx.var.status})
    #   metric_latency:observe(ngx.now() - ngx.req.start_time(), {host})
    #   metric_response_sizes:observe(tonumber(ngx.var.bytes_sent), {host})
    # }

}
